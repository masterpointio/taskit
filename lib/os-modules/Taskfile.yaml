version: "3"

vars:
  DEFAULT_MODULES: |
    terraform-aws-ssm-agent \
    terraform-aws-tailscale \
    terraform-datadog-users \
    terraform-github-teams \
    terraform-github-organization \
    terraform-googleworkspace-users-groups-automation \
    terraform-postgres-automation \
    terraform-secrets-helper \
    terraform-spacelift-automation \
    terraform-spacelift-aws-integrations \
    terraform-spacelift-events-collector-audit-trail \
    terraform-spacelift-policies
  SYNC_BRANCH: chore/sync-with-template
  SHARED_TMP_DIR: .tmp-template-sync
tasks:
  sync:
    desc: |
      Sync files from `terraform-module-template` to specified Terraform open-source module repos.
      Example: `task os:sync -- terraform-spacelift-automation`
    summary: |
      This will sync the specified list of files and directories from the remote template repository
      to each of the default Terraform module repositories listed in DEFAULT_MODULES.
      The task will synchronize the hardoded list of common files and directories.
      To sync to a specific repository (or a custom list of repositories), pass their names as arguments:
      `task os:sync -- terraform-custom-module`
      or for multiple modules: `task os:sync -- "terraform-custom-module terraform-another-module"`

    vars:
      MODULES: "{{if .CLI_ARGS}}{{.CLI_ARGS}}{{else}}{{.DEFAULT_MODULES}}{{end}}"
      FILES: >-
        .github
        .trunk
        .coderabbit.yaml
        .editorconfig
        .gitignore
        .terraform-docs.yaml
        LICENSE
        aqua.yaml
    cmds:
      - |
        # Convert newlines to spaces and remove backslashes
        modules=$(echo "{{.MODULES}}" | tr '\n' ' ' | sed 's/\\//g')
        for module in $modules
        do
          echo "Syncing files to ../$module..."
          for file in {{.FILES}}
          do
            echo "  Syncing $file"
            rsync -av --delete {{.SHARED_TMP_DIR}}/$file ../$module/
          done
        done

  pull-and-branch:
    desc: |
      Pull main branch and create a sync branch for specified Terraform open-source module repos.
      Example: `task os:pull-and-branch -- terraform-spacelift-automation`
    summary: |
      This will pull the main branch and create a new branch named 'chore/sync-with-template'
      for each of the default Terraform module repositories listed in DEFAULT_MODULES.
      To sync to a specific repository (or a custom list of repositories), pass their names as arguments:
      `task os:pull-and-branch -- terraform-custom-module`
      or for multiple modules: `task os:pull-and-branch -- "terraform-custom-module terraform-another-module"`

    vars:
      MODULES: "{{if .CLI_ARGS}}{{.CLI_ARGS}}{{else}}{{.DEFAULT_MODULES}}{{end}}"
    cmds:
      - |
        # Convert newlines to spaces and remove backslashes
        modules=$(echo "{{.MODULES}}" | tr '\n' ' ' | sed 's/\\//g')
        for module in $modules
        do
          echo "üöÄ Processing ../$module..."
          cd ../$module
          echo "‚¨áÔ∏è Pulling main branch..."
          git checkout main
          git pull origin main
          echo "üîÑ Creating sync branch..."
          git checkout -b {{.SYNC_BRANCH}}
          cd -
        done

  push:
    desc: |
      Commit and push changes with the specified commit message.
      Example: `task os:push -- terraform-spacelift-automation`
    summary: |
      This will commit and push changes with the message "chore: update with the latest template state"
      for each of the specified Terraform module repositories.
      To push to a specific repository (or a custom list of repositories), pass their names as arguments:
      `task os:push -- terraform-custom-module`
      or for multiple modules: `task os:push -- "terraform-custom-module terraform-another-module"`

    vars:
      MODULES: "{{if .CLI_ARGS}}{{.CLI_ARGS}}{{else}}{{.DEFAULT_MODULES}}{{end}}"
    cmds:
      - |
        # Convert newlines to spaces and remove backslashes
        modules=$(echo "{{.MODULES}}" | tr '\n' ' ' | sed 's/\\//g')
        for module in $modules
        do
          echo "üöÄ Processing ../$module..."
          cd ../$module
          echo "üìù Committing changes..."
          git add .
          git commit -m "chore: update with the latest template state"
          echo "‚¨ÜÔ∏è Pushing changes..."
          git push origin {{.SYNC_BRANCH}}
          cd -
        done

  setup-template:
    desc: Set up the template repository in a shared temporary directory
    cmds:
      - task: cleanup-template
      - git clone --depth 1 https://github.com/masterpointio/terraform-module-template.git {{.SHARED_TMP_DIR}}

  cleanup-template:
    desc: Clean up the shared temporary directory
    cmds:
      - rm -rf {{.SHARED_TMP_DIR}}

  sync-all:
    desc: |
      Pull main branch, create a sync branch, and sync with template for specified Terraform open-source module repos.
      Example: `task os:sync-all -- terraform-spacelift-automation`
    summary: |
      This will:
      1. Pull the main branch and create a new branch named 'chore/sync-with-template'
      2. Sync files from the template repository
      for each of the default Terraform module repositories listed in DEFAULT_MODULES.
      To sync to a specific repository (or a custom list of repositories), pass their names as arguments:
      `task os:sync-all -- terraform-custom-module`
      or for multiple modules: `task os:sync-all -- "terraform-custom-module terraform-another-module"`

    vars:
      MODULES: "{{if .CLI_ARGS}}{{.CLI_ARGS}}{{else}}{{.DEFAULT_MODULES}}{{end}}"
    cmds:
      - task: setup-template
      - task: pull-and-branch
      - task: sync
      - task: cleanup-template
