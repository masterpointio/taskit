version: "3"

includes:
  aws:
    taskfile: ../aws/Taskfile.yaml
    internal: true

vars:
  SNAPSHOT_NAME:
    sh: date +%Y-%m-%d # YYYY-MM-DD
  SNAPSHOT_ENV: '{{.SNAPSHOT_ENV | default "dev"}}'
  SNAPSHOT_PATH: .snaplet/snapshots/{{.SNAPSHOT_ENV}}/{{.SNAPSHOT_NAME}}

tasks:
  validate-copycat-secret:
    desc: Validates that the `COPYCAT_SECRET` env var has been passed.
    silent: true
    internal: true
    cmds:
      - |
        if [[ -z "{{.COPYCAT_SECRET}}" ]]; then
          printf "\n\n‚ùå COPYCAT_SECRET is required to invoke this snaplet task.\n"
          printf "Please ensure you're providing that value through .env.taskit-secrets locally.\n"
          printf "This value is typically stored in a global SOPS file for developer use.\n"
          exit 1
        fi

  validate-snaplet-bucket-access:
    desc: Validate access to the given S3 Bucket
    silent: true
    internal: true
    requires:
      vars:
        - SNAPLET_BUCKET
    cmds:
      - task: aws:validate-access
        vars:
          AWS_COMMAND: s3 ls {{.SNAPLET_BUCKET}}
          MESSAGE: |
            AWS CLI access is required to invoke this task.
            Please ensure you're using the correct AWS credentials that have access to the {{.SNAPLET_BUCKET}} bucket.

  list:
    desc: List all available snapshots in the given S3 Bucket
    silent: true
    deps:
      - validate-snaplet-bucket-access
    requires:
      vars:
        - SNAPLET_BUCKET
    cmds:
      - printf "\n\nüì∏ Snapshots available:\n"
      - aws s3 ls {{.SNAPLET_BUCKET}} | sed 's/PRE//g'

  clean:
    desc: Clean up snapshot at SNAPSHOT_PATH
    silent: true
    requires:
      vars:
        - SNAPSHOT_PATH
    cmds:
      - rm -rf {{.SNAPSHOT_PATH}}
      - printf "\n\nüóëÔ∏è Cleaned up snapshot at {{.SNAPSHOT_PATH}}"

  capture:
    desc: Helper for running snaplet snapshot capture.
    silent: true
    deps:
      - clean
      - validate-copycat-secret
    requires:
      vars:
        - SNAPLET_SOURCE_DATABASE_URL
    cmds:
      - SNAPLET_SOURCE_DATABASE_URL={{.SNAPLET_SOURCE_DATABASE_URL}} snaplet snapshot capture {{.SNAPSHOT_PATH}}
      - zip -r {{.SNAPSHOT_PATH}}.zip {{.SNAPSHOT_PATH}}
      - printf "\n\n‚úÖ Captured snapshot at {{.SNAPSHOT_PATH}}\n"

  upload:
    desc: Helper for uploading a snaplet snapshot to a given S3 Bucket
    deps:
      - validate-snaplet-bucket-access
    vars:
      UPLOAD_AS_LATEST: '{{.UPLOAD_AS_LATEST | default "true"}}'
    requires:
      vars:
        - SNAPLET_BUCKET
        - SNAPSHOT_ENV
    cmds:
      - aws s3 cp --sse=AES256 --recursive {{.SNAPSHOT_PATH}} {{.SNAPLET_BUCKET}}/{{.SNAPSHOT_ENV}}/{{.SNAPSHOT_NAME}}
      - |
        if [ "{{.UPLOAD_AS_LATEST}}" -eq "true" ]; then
          # We first remove everything so there are no artifacts leftover from a previous upload that we're not overwriting.
          aws s3 rm --recursive {{.SNAPLET_BUCKET}}/{{.SNAPSHOT_ENV}}/latest
          aws s3 cp --sse=AES256 --recursive {{.SNAPSHOT_PATH}} {{.SNAPLET_BUCKET}}/{{.SNAPSHOT_ENV}}/latest
        fi

  download:
    desc: Downloads a snaplet snapshot to the local machine.
    summary: |
      Downloads a given snaplet snapshot from a given S3 Bucket.
      Pass in RESTORE_SNAPSHOT to download a specific snapshot from the bucket.
      Pass in SNAPSHOT_ENV to download the snapshot for a specific environment.
      Pass in SNAPLET_BUCKET to download from a specific bucket.
    silent: true
    deps:
      - task: clean
        vars:
          SNAPSHOT_PATH: "{{.SNAPSHOT_PATH}}"
      - task: validate-snaplet-bucket-access
    vars:
      RESTORE_SNAPSHOT: '{{.RESTORE_SNAPSHOT | default "latest"}}'
      SNAPSHOT_PATH: ".snaplet/snapshots/{{.SNAPSHOT_ENV}}/{{.RESTORE_SNAPSHOT}}"
    requires:
      vars:
        - SNAPLET_BUCKET
        - SNAPSHOT_ENV
    cmds:
      - aws s3 cp --quiet --sse=AES256 --recursive {{.SNAPLET_BUCKET}}/{{.SNAPSHOT_ENV}}/{{.RESTORE_SNAPSHOT}} {{.SNAPSHOT_PATH}}
      - printf "\n\n‚¨á Snapshot downloaded to {{.SNAPSHOT_PATH}}\n\n"

  restore:
    desc: Restores the given RESTORE_SNAPSHOT to the SNAPLET_TARGET_DATABASE_URL database.
    silent: true
    vars:
      RESTORE_OPTIONS: '{{.RESTORE_OPTIONS | default ""}}'
      RESTORE_SNAPSHOT: '{{.RESTORE_SNAPSHOT | default "latest"}}'
      SNAPSHOT_PATH: .snaplet/snapshots/{{.SNAPSHOT_ENV}}/{{.RESTORE_SNAPSHOT}}
    requires:
      vars:
        - SNAPLET_TARGET_DATABASE_URL
    cmds:
      - printf "\n\nüëã Restoring snapshot from {{.SNAPSHOT_PATH}}\n"
      - snaplet snapshot restore {{.RESTORE_OPTIONS}} {{.SNAPSHOT_PATH}}
      - printf "\n\nüíØ Restored snapshot from {{.SNAPSHOT_PATH}}\n"

  restore:noprompt:
    desc: Restores the given RESTORE_SNAPSHOT to the SNAPLET_TARGET_DATABASE_URL database.
    silent: true
    vars:
      RESTORE_SNAPSHOT: '{{.RESTORE_SNAPSHOT | default "latest"}}'
      SNAPSHOT_PATH: .snaplet/snapshots/{{.SNAPSHOT_ENV}}/{{.RESTORE_SNAPSHOT}}
    requires:
      vars:
        - SNAPLET_TARGET_DATABASE_URL
    cmds:
      - task: restore
        vars:
          RESTORE_OPTIONS: --yes --no-progress
          RESTORE_SNAPSHOT: "{{.RESTORE_SNAPSHOT}}"
          SNAPSHOT_PATH: "{{.SNAPSHOT_PATH}}"
