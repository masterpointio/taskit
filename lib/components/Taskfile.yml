version: "3"

tasks:
  init:
    desc: Initializes a new Masterpoint's component directory and fetch its configuration and sources.
    summary: |
      This initializes a new component directory for Masterpoint and fetches its configuration and sources.
      It requires COMPONENT_NAME and optionally COMPONENT_VERSION. If COMPONENT_VERSION is not set, it fetches the latest commit SHA from the main branch.
      Usage example:
      `task [namespace:]init COMPONENT_NAME=example-component COMPONENT_VERSION=ca6cad6a1c3be75fc39533b0e18a0b52c20bb957`
      `task [namespace:]init COMPONENT_NAME=example-component` (This will use the latest commit SHA from the main branch)
    requires:
      vars:
        - COMPONENT_NAME
    silent: true
    cmds:
      - echo 'ðŸ‘‹ Initializing component {{.COMPONENT_NAME}}...'
      - mkdir -p ./components/{{.COMPONENT_NAME}}
      - echo 'Fetching component config file...'
      - |
        if [ -z "{{.COMPONENT_VERSION}}" ]; then
          echo 'COMPONENT_VERSION not set, using latest commit SHA from main branch...'
          COMPONENT_VERSION=$(curl -s https://api.github.com/repos/masterpointio/terraform-components/commits/main | jq -r '.sha')
        else
          COMPONENT_VERSION="{{.COMPONENT_VERSION}}"
        fi
        echo "Using COMPONENT_VERSION: $COMPONENT_VERSION"
        echo "https://raw.githubusercontent.com/masterpointio/terraform-components/$COMPONENT_VERSION/templates/component.yaml"
        curl -L https://raw.githubusercontent.com/masterpointio/terraform-components/$COMPONENT_VERSION/templates/component.yaml \
        | sed -e "s|COMPONENT_NAME|{{.COMPONENT_NAME}}|g" -e "s|COMPONENT_VERSION|$COMPONENT_VERSION|g" \
        > ./components/{{.COMPONENT_NAME}}/component.yaml
      - task: update

  update:
    desc: Updates an existing component from its source based on the config information.
    summary: |
      Refreshes an existing component by downloading the version specified on the configuration in 'component.yaml'.
      It requires the COMPONENT_NAME variable for identification.
      Usage example:
      `task [namespace:]update COMPONENT_NAME=example-component`

    requires:
      vars:
        - COMPONENT_NAME
    vars:
      COMPONENT_PATH: "components/{{.COMPONENT_NAME}}"
      COMPONENT_CONFIG: "{{.COMPONENT_PATH}}/component.yaml"
      COMPONENT_SOURCE_URI:
        sh: dasel -f {{.COMPONENT_CONFIG}} '.component.source.uri'
      COMPONENT_VERSION:
        sh: dasel -f {{.COMPONENT_CONFIG}} '.component.source.version'
      TAR_FILE:
        sh: echo 'repo_{{.COMPONENT_VERSION}}.tar.gz' | tr '/' '_'
    silent: true
    cmds:
      - echo 'Updating component {{.COMPONENT_NAME}} from {{.COMPONENT_SOURCE_URI}} with version {{.COMPONENT_VERSION}}...'
      - curl -LJ {{.COMPONENT_SOURCE_URI}}{{.COMPONENT_VERSION}} -o {{.TAR_FILE}}
      - |
        echo 'Extracting {{.TAR_FILE}}...'
        # List the contents of the archive and get the directory name
        REPO_DIR=$(tar -tf {{.TAR_FILE}} | head -n 1 | sed -e 's@/.*@@')
        tar -xzf {{.TAR_FILE}}
        mv -f $REPO_DIR/{{.COMPONENT_PATH}}/* {{.COMPONENT_PATH}}
        rm -f {{.TAR_FILE}} && rm -rf $REPO_DIR
      - echo "âœ… Component {{.COMPONENT_NAME}} updated successfully!"
